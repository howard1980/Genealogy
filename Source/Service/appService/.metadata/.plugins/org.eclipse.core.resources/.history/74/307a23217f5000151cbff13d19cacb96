package com.beetlestech.nfe.fw.core.properties.impl;

import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import org.apache.commons.digester.Digester;
import org.apache.commons.digester.xmlrules.DigesterLoader;

import com.maxiaohua.genealogy.fw.core.exception.SystemException;
import com.maxiaohua.genealogy.fw.core.util.StringUtil;


public class MessageXMLImpl extends AbstractMessageProperties {

    
    public MessageXMLImpl(
            String msgResources) {
        super(msgResources);
    }

    
    @Override
    protected Map<String, String> loadResourceAsMap(
            String msgResources) {
        
        URL resourceUrl = Thread.currentThread().getContextClassLoader().getResource(msgResources + ".xml");
        
        XMLMessageBeans beans = null;
        try {
            beans = (XMLMessageBeans) defaultDigester.parse(resourceUrl);
            Map<String, String> msgs = new HashMap<String, String>();
            for (XMLMessageBean bean : beans.getBeans()) {
                String key = bean.getId();
                String skip = bean.getSkip();
                if (StringUtil.isEmpty(skip)) {
                    skip = "";
                }
                String value = bean.getType() + "," + skip + "," + bean.getText();
                msgs.put(key, value);
            }
            return msgs;
        } catch (Exception e) {
            throw new SystemException(e, "Failed to load XML message resource[" + msgResources + "].");
        }
    }

    
    @Override
    public String get(
            String messageId) {
        if (messageId.contains(MESSAGE_GROUP_SPLIT_CHAR)) {
            return resourceMap.get(messageId.substring(0, messageId.indexOf(MESSAGE_GROUP_SPLIT_CHAR))).get(messageId);
        }
        Set<String> groups = resourceMap.keySet();
        for (String group : groups) {
            Map<String, String> msgProp = resourceMap.get(group);
            if (msgProp.containsKey(messageId)) {
                return msgProp.get(messageId);
            }
        }
        return messageId;
    }

    
    @Override
    public String get(
            String messageId,
            Object... parameters) {
        return MessageUtil.replaceMessageOptions(MessageUtil.getMessageContent(this.get(messageId)), parameters);
    }

    
    private static final String RULE_MAPPING_DEFINE = MessageXMLImpl.class.getPackage().getName().replace(".", "/") + "/xmlMessageRule.xml";
    
    private static final Digester defaultDigester = DigesterLoader.createDigester(MessageXMLImpl.class.getClassLoader().getResource(
            RULE_MAPPING_DEFINE));
}