package com.beetlestech.nfe.main.biz.a01.impl;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.maxiaohua.genealogy.fw.core.biz.AbstractDBLogic;
import com.maxiaohua.genealogy.fw.core.push.JPushManager;
import com.maxiaohua.genealogy.fw.core.type.AutoInject;
import com.maxiaohua.genealogy.fw.core.util.StringUtil;
import com.maxiaohua.genealogy.fw.core.wechet.WechetPay;
import com.beetlestech.nfe.main.biz.a01.HBJPushUtils;
import com.beetlestech.nfe.main.biz.a01.HbAccount;
import com.beetlestech.nfe.main.biz.a01.HbCashCoupon;
import com.beetlestech.nfe.main.biz.a01.dto.AccountHistoryDTO;
import com.beetlestech.nfe.main.biz.a01.dto.WechetInfoDTO;
import com.beetlestech.nfe.main.biz.com.HbCustomerAccount;
import com.beetlestech.nfe.main.biz.com.HbMasterCache;
import com.beetlestech.nfe.main.biz.constant.CommonConstant;
import com.beetlestech.nfe.main.biz.constant.CtgCodeConstant;
import com.beetlestech.nfe.main.biz.constant.HbMessageCode;
import com.beetlestech.nfe.main.biz.constant.MasterCacheConstant.MASTER_NAME;
import com.beetlestech.nfe.main.db.base.StatementDTO;
import com.beetlestech.nfe.main.db.base.StatementUtil;
import com.beetlestech.nfe.main.db.tbl.CarWashDTO;
import com.beetlestech.nfe.main.db.tbl.CustomerAccountDTO;
import com.beetlestech.nfe.main.db.tbl.JpushDTO;
import com.beetlestech.nfe.main.db.tbl.WashOrderDTO;
import com.beetlestech.nfe.main.db.view.VAccountHistoryDTO;
import com.beetlestech.nfe.main.db.view.VCashCouponOrderDTO;
import com.beetlestech.nfe.main.db.view.VOrderAmmountDTO;
import com.beetlestech.nfe.main.db.view.VOrderInfoDTO;
import com.beetlestech.nfe.main.db.view.VWorkerServiceItemsDTO;

public class HbAccountImpl extends AbstractDBLogic implements HbAccount, HbMessageCode, CommonConstant, CtgCodeConstant {
	/**
	 * 账户情报数据
	 */
	protected static final String SH_INFO = "账户情报数据";
	
	/**
	 * Mast数据缓存Biz类
	 */
	@AutoInject
	protected HbMasterCache hbMasterCache;
	
    @AutoInject(name = "wechetPay")
    protected WechetPay wechetPay;
    
	@AutoInject
	protected HBJPushUtils jpushUtils;
	
    @AutoInject(name = "jpushManager")
    protected JPushManager jpushManager;
    
    @AutoInject
	protected HbCashCoupon hbCashCoupon;
    
    @AutoInject
	protected HbCustomerAccount hbCustomerAccount;
	
	@Override
	public Double getAccountBalance(Long customerID) {
		CustomerAccountDTO customerAccount = new CustomerAccountDTO();
		customerAccount.setCustomerID(customerID);
		customerAccount.setType(Integer.parseInt(PAYMENT_TYPE.SXXC.toString()));
		customerAccount = this.queryDAO.queryForObject(CustomerAccountDTO.EQUAL_SEARCH, customerAccount);
		if(customerAccount != null){
			return customerAccount.getAmount().doubleValue();
		}
		else{
			return 0.00;
		}
	}

	@Override
	public AccountHistoryDTO[] getAccountHistory(Long customerID) {
		VAccountHistoryDTO accountHistory = new VAccountHistoryDTO();
		List<AccountHistoryDTO> accountHistories = new ArrayList<AccountHistoryDTO>();
		accountHistory.setCustomerID(customerID);
		
		StatementDTO statementDTO = new StatementDTO();
		StatementUtil.addOrderBy(statementDTO, VAccountHistoryDTO.COLUMN_ORDER_DATE, StatementUtil.KEYWORD.DESC);
		StatementUtil.addOrderBy(statementDTO, VAccountHistoryDTO.COLUMN_ORDER_TIME, StatementUtil.KEYWORD.DESC);
		accountHistory.set_orderByCondition(statementDTO.getSQLOrderByStatement());
		
		List<VAccountHistoryDTO> lst = 
				this.queryDAO.queryForObjectList(VAccountHistoryDTO.EQUAL_SEARCH, accountHistory);
		
		for(VAccountHistoryDTO item: lst){
			AccountHistoryDTO account = new AccountHistoryDTO();
			account.setDate(item.getOrderDate());
			account.setTime(item.getOrderTime());
			if(RECHARGE_TYPE.RECHARGE.toString().equals(item.getRecharge().toString())){
				account.setIsRecharge(true);
			}
			else{
				account.setIsRecharge(false);
			}
			
			account.setOrderNO(item.getOrderNO());
			account.setPrice(item.getAmmount().doubleValue());
			accountHistories.add(account);
		}
		return accountHistories.toArray(new AccountHistoryDTO[accountHistories.size()]);
	}

	@Override
	public void paySXXC(Long customerID, Long orderID) {
		// 查询订单金额
		VOrderAmmountDTO orderAmmounto = new VOrderAmmountDTO();
		orderAmmounto.setWashOrderID(orderID);
		orderAmmounto = this.queryDAO.queryForObject(VOrderAmmountDTO.EQUAL_SEARCH, orderAmmounto);
		if(orderAmmounto == null){
			createApplicationException(M10010WS);
		}
		
		// 订单是否已支付
		if(orderAmmounto.getStatus() >= Integer.parseInt(ORDER_STATUS.PAID.toString())){
			createApplicationException(M11003WC);
		}
		
		// 查询账户余额
		CustomerAccountDTO customerAccount = new CustomerAccountDTO();
		customerAccount.setCustomerID(customerID);
		customerAccount.setType(Integer.parseInt(PAYMENT_TYPE.SXXC.toString()));
		customerAccount = this.queryDAO.queryForObject(CustomerAccountDTO.EQUAL_SEARCH, customerAccount);
		
		java.math.BigDecimal account = new java.math.BigDecimal(0d);
		
		if(customerAccount != null){
			account = customerAccount.getAmount();
		}
		
		// 是否够支付
		if(account.compareTo(orderAmmounto.getPayment()) < 0 ){
			createApplicationException(M11006WC);
		}
		
		BigDecimal balance = account.subtract(orderAmmounto.getPayment());
		customerAccount.setAmount(balance);
		
		// 更改账户金额
		this.updateDAO.updateOne(CustomerAccountDTO.UPDATE, customerAccount, M10190WS, SH_INFO);
		
		// 记录消费履历
		hbCustomerAccount.insetCustomerAccountDetail(
				customerID, 
				orderAmmounto.getPayment(), 
				orderID, 
				ORDER_TYPE.SXXC_ORDER.toString(), 
				Integer.parseInt(PAYMENT_TYPE.SXXC.toString()));
		
		// 更改订单状态
		CarWashDTO carWash = new CarWashDTO();
		carWash.setCarWashID(orderAmmounto.getCarWashID());
		carWash.setPayType(Integer.parseInt(PAYMENT_TYPE.SXXC.toString()));
		carWash.setStatus(Integer.parseInt(ORDER_STATUS.PAID.toString()));
		int updateResult = this.updateDAO.updateOne(CarWashDTO.UPDATE, carWash, M10190WS, SH_INFO);
		
		if(updateResult==1){ // 成功
			
			//更改代金券状态为已用
			hbCashCoupon.updateCashCouponRecord(customerID,  orderID, Integer.parseInt(CASH_COUPON_RECORD_TYPE.USED.toString()));
			
			WashOrderDTO washOrderDTO = new WashOrderDTO();
			washOrderDTO.setWashOrderID(orderID);
			washOrderDTO = this.queryDAO.queryForObject(WashOrderDTO.EQUAL_SEARCH,
					washOrderDTO);
			
			if(washOrderDTO != null){
				JpushDTO jpushInfo = jpushUtils.getJpushInfoByWorkerID(washOrderDTO.getWorkerGroupID());
				if(jpushInfo != null){
					Map<String,String> extra = new HashMap<String, String>();
					extra.put("orderID", String.valueOf(orderID )  );
					extra.put("type", "0"  );
					jpushManager.sendByRegisitrationIDToWorker("有新付款订单",extra, jpushInfo.getRegisitrationID() );
				}
			}

		}
	}

	@Override
	public WechetInfoDTO getWechetPay(Long customerID, String orderNO) {
		String content = "";
		BigDecimal payment = null;
		if(orderNO.substring(0, 3).equals(ORDER_TYPE.SXXC_ORDER.toString())){
			// 订单取得
			VOrderInfoDTO orderSeachDTO = new VOrderInfoDTO();
			orderSeachDTO.setOrderNO(orderNO);
			VOrderInfoDTO orderInfo = this.queryDAO.queryForObject(VOrderInfoDTO.EQUAL_SEARCH, orderSeachDTO);
			if(orderInfo == null){
				createApplicationException(M10010WS);
			}
			
			// 获得商品信息
			String[] serviceIDs = orderInfo.getGroupServiceID().split(",");
			StringBuffer sb = new StringBuffer();
			for(String serviceID : serviceIDs){
				List<VWorkerServiceItemsDTO> lstServiceItem =
						hbMasterCache.getMasterData(MASTER_NAME.GROUP_SERVICE, Integer.parseInt(serviceID));
				if(lstServiceItem != null && lstServiceItem.size()>0){
					if(content.length()>0){
						sb.append(" ");
					}
					sb.append(lstServiceItem.get(0).getItemName());
				}
			}
			content = sb.toString();
			payment = orderInfo.getPayment();
			orderNO = orderInfo.getOrderNO();
		}
		else if(orderNO.substring(0, 3).equals(ORDER_TYPE.SXXC_CASH_COUPON.toString())){
			VCashCouponOrderDTO cashCouponOrderDTO = new VCashCouponOrderDTO();
			cashCouponOrderDTO.setOrderNO(orderNO);
			cashCouponOrderDTO = 
					this.queryDAO.queryForObject(VCashCouponOrderDTO.EQUAL_SEARCH, cashCouponOrderDTO);
			
			if(cashCouponOrderDTO == null){
				//1件也不存在的场合、「ApplicationException」返回
				createApplicationException(M10440WS, SH_INFO);
			}
			
			content = cashCouponOrderDTO.getName();
			payment = cashCouponOrderDTO.getPrice();
			orderNO = cashCouponOrderDTO.getOrderNO();
		}
		else{
			return null;
		}
		
		wechetPay.getPrepayID(content.toString(), 
				orderNO, 
				String.valueOf(payment.multiply(new BigDecimal(100)).intValue()) );
		
		if(StringUtil.isEmpty(wechetPay.getPrepayID())){
			createApplicationException(M10109WC);
		}
		
		//输出参数
		WechetInfoDTO wechetInfo = new WechetInfoDTO();
		wechetInfo.setAppid(wechetPay.getAppID());
		wechetInfo.setPartnerid(wechetPay.getPartnerID());
		wechetInfo.setNoncestr(wechetPay.getNoncestr());
		wechetInfo.setPackageinfo(wechetPay.getPackage());
		wechetInfo.setPrepayid(wechetPay.getPrepayID());
		wechetInfo.setTimestamp(wechetPay.getTimestamp());
		wechetInfo.setSign(wechetPay.getSign());
		
		return wechetInfo;
	}

	@Override
	public Boolean getWechetPaied(Long orderID) {
		WechetPay.WechetQuery wechet = wechetPay.getOrderPaied(orderID.toString());
		if(wechet != null){
			// 订单取得
			VOrderInfoDTO orderSeachDTO = new VOrderInfoDTO();
			orderSeachDTO.setWashOrderID(orderID);
			VOrderInfoDTO orderInfo = this.queryDAO.queryForObject(VOrderInfoDTO.EQUAL_SEARCH, orderSeachDTO);
			// 更改订单状态
			CarWashDTO carWash = new CarWashDTO();
			carWash.setCarWashID(orderInfo.getCarWashID());
			carWash.setPayType(Integer.parseInt(PAYMENT_TYPE.WECHETPAY.toString()));
			carWash.setStatus(Integer.parseInt(ORDER_STATUS.PAID.toString()));
			int updateResult = this.updateDAO.updateOne(CarWashDTO.UPDATE, carWash, M10190WS, SH_INFO);
			
			if(updateResult==1){
				//更改代金券状态为已用
				hbCashCoupon.updateCashCouponRecord(null,  orderID, Integer.parseInt(CASH_COUPON_RECORD_TYPE.USED.toString() ) );
				
				//发送推送
				JpushDTO jpushInfo = jpushUtils.getJpushInfoByOrderID(orderID);
				if(jpushInfo != null){
					Map<String,String> extra = new HashMap<String, String>();
					extra.put("orderID", String.valueOf(orderID )  );
					extra.put("type", "0"  );
					jpushManager.sendByRegisitrationIDToWorker("有新付款订单",extra,jpushInfo.getRegisitrationID() );
				}
			}
			
			return true;
		}
		else{
			return false;
		}
	}
}
