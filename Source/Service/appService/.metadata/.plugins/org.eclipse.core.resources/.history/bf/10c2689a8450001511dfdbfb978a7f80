package com.beetlestech.nfe.main.biz.a01.impl;

import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Time;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.maxiaohua.genealogy.fw.core.biz.AbstractDBLogic;
import com.maxiaohua.genealogy.fw.core.push.JPushManager;
import com.maxiaohua.genealogy.fw.core.sys.impl.SystemHandlerImpl;
import com.maxiaohua.genealogy.fw.core.type.AutoInject;
import com.maxiaohua.genealogy.fw.core.wechet.WechetPay;
import com.maxiaohua.genealogy.fw.core.wechet.WechetPay.WechetQuery;
import com.beetlestech.nfe.main.biz.a01.HBJPushUtils;
import com.beetlestech.nfe.main.biz.a01.HbAccount;
import com.beetlestech.nfe.main.biz.a01.HbCashCoupon;
import com.beetlestech.nfe.main.biz.a01.HbOrder;
import com.beetlestech.nfe.main.biz.a01.dto.CashCouponDTO;
import com.beetlestech.nfe.main.biz.a01.dto.GroupServiceItemDTO;
import com.beetlestech.nfe.main.biz.a01.dto.OrderInfoDTO;
import com.beetlestech.nfe.main.biz.a01.dto.OrderItemDTO;
import com.beetlestech.nfe.main.biz.a01.dto.OrderResultDTO;
import com.beetlestech.nfe.main.biz.a01.dto.OrdersDTO;
import com.beetlestech.nfe.main.biz.a01.dto.ServiceItemDTO;
import com.beetlestech.nfe.main.biz.a01.dto.WorkerAccountDTO;
import com.beetlestech.nfe.main.biz.com.HbAliPay;
import com.beetlestech.nfe.main.biz.com.HbCustomerAccount;
import com.beetlestech.nfe.main.biz.com.HbMasterCache;
import com.beetlestech.nfe.main.biz.com.dto.CityAreaDTO;
import com.beetlestech.nfe.main.biz.com.dto.CityInfoDTO;
import com.beetlestech.nfe.main.biz.com.util.GISUtil;
import com.beetlestech.nfe.main.biz.com.util.RegionalIntegerXY;
import com.beetlestech.nfe.main.biz.constant.CommonConstant;
import com.beetlestech.nfe.main.biz.constant.CtgCodeConstant;
import com.beetlestech.nfe.main.biz.constant.HbMessageCode;
import com.beetlestech.nfe.main.biz.constant.MasterCacheConstant.MASTER_NAME;
import com.beetlestech.nfe.main.db.base.StatementDTO;
import com.beetlestech.nfe.main.db.base.StatementUtil;
import com.beetlestech.nfe.main.db.tbl.CarInfoDTO;
import com.beetlestech.nfe.main.db.tbl.CarWashDTO;
import com.beetlestech.nfe.main.db.tbl.CashCouponOrderDTO;
import com.beetlestech.nfe.main.db.tbl.JpushDTO;
import com.beetlestech.nfe.main.db.tbl.MobileInfoDTO;
import com.beetlestech.nfe.main.db.tbl.OrderEvidenceDTO;
import com.beetlestech.nfe.main.db.tbl.WashItemBeyondDTO;
import com.beetlestech.nfe.main.db.tbl.WashItemDTO;
import com.beetlestech.nfe.main.db.tbl.WashOrderBeyondDTO;
import com.beetlestech.nfe.main.db.tbl.WashOrderDTO;
import com.beetlestech.nfe.main.db.tbl.WeixinPayDTO;
import com.beetlestech.nfe.main.db.view.VOrderInfoDTO;
import com.beetlestech.nfe.main.db.view.VWorkerAccountDTO;
import com.beetlestech.nfe.main.db.view.VWorkerServiceItemsDTO;

public class HbOrderImpl extends AbstractDBLogic implements HbOrder, HbMessageCode, CommonConstant, CtgCodeConstant {
	/**
	 * 订单情报数据
	 */
	protected static final String SH_INFO = "订单情报数据";
	
	/**
	 * Mast数据缓存Biz类
	 */
	@AutoInject
	protected HbMasterCache hbMasterCache;
	
	@AutoInject
	protected HbAccount hbAccount;
	
	@AutoInject
	protected HBJPushUtils jpushUtils;
	
    @AutoInject(name = "jpushManager")
    protected JPushManager jpushManager;
    
    @AutoInject
	protected HbCashCoupon hbCashCoupon;
    
    @AutoInject(name = "wechetPay")
    protected WechetPay wechetPay;
    
    @AutoInject
	protected HbCustomerAccount hbCustomerAccount;
    
    @AutoInject
    protected HbAliPay hbAliPay;
	
	@Override
	public OrderResultDTO createOrder(Long customerID, String licencePlate,
			Long carModel, String carColor, Date date, Time time,
			String address, ServiceItemDTO[] serviceItems, CashCouponDTO cashCoupon, 
			Double longitude, Double latitude, String cityCode, String remark) {
		Map<Integer, ServiceItemDTO> workItems = null;
		
		// 订单受否可以生成
		OrderResultDTO orderResult = 
				checkCreateOrder(customerID, cityCode, longitude, latitude, date, time, serviceItems);
		if(orderResult == null){
			createApplicationException(M11005WC);
		}
		else if(orderResult.getResult() == false){
			return orderResult;
		}
		
		//用户使用代金券,检查代金券是否可以用
		com.beetlestech.nfe.main.db.tbl.CashCouponDTO cashCouponDb = null;
		if(cashCoupon!=null){
			cashCouponDb = new com.beetlestech.nfe.main.db.tbl.CashCouponDTO();
			cashCouponDb.setCASHCOUPONID(cashCoupon.getCashCouponID());
			cashCouponDb = this.queryDAO.queryForObject(com.beetlestech.nfe.main.db.tbl.CashCouponDTO.EQUAL_SEARCH, cashCouponDb);
			
			if(cashCouponDb==null){
				createApplicationException(M11107WC);
			}
			List<String> services = new ArrayList<String>();
			for(ServiceItemDTO item : serviceItems){
				services.add(item.getServiceItemID());
			}
			List<CashCouponDTO> lst = 
					hbCashCoupon.getCashCoupon(customerID, date, services.toArray(new String[services.size()]), null);
			if(lst == null || lst.size() == 0){
				createApplicationException(M11107WC);
			}
			
			Boolean finder = false;
			for(CashCouponDTO item : lst){
				if(item.getCashCouponID() == cashCoupon.getCashCouponID()){
					finder = true;
				}
			}
			
			if(finder == false){
				createApplicationException(M11107WC);
			}
			
		}
		
		// 车辆信息更新
		CarInfoDTO carInfo = new CarInfoDTO();
		carInfo.setLicencePlate(licencePlate);
		carInfo.setCustomerID(customerID);
		CarInfoDTO carInfoSearch = this.queryDAO.queryForObject(CarInfoDTO.EQUAL_SEARCH, carInfo);
		if(carInfoSearch == null){
			carInfo.setCarModelID(carModel);
			carInfo.setColorID(carColor);
			this.updateDAO.updateOne(CarInfoDTO.INSERT, carInfo, M10190WS, SH_INFO);
		}
		else
		{
			carInfo.setCarID(carInfoSearch.getCarID());
			if(carInfoSearch.getCarModelID() != carModel
					|| carInfoSearch.getColorID() != carColor){
				carInfoSearch.setCustomerID(customerID);
				carInfoSearch.setCarModelID(carModel);
				carInfoSearch.setColorID(carColor);
				this.updateDAO.updateOne(CarInfoDTO.UPDATE, carInfoSearch, M10190WS, SH_INFO);
			}
		}

		// 洗车内容追加
		CarWashDTO carWashDTO = new CarWashDTO();
		carWashDTO.setCarID(carInfo.getCarID());
		carWashDTO.setWashDate(date);
		carWashDTO.setWashTime(time);
		
		workItems = this.getWorkItems(cityCode, longitude, latitude);
		BigDecimal ammount = new BigDecimal(0d);
		for(ServiceItemDTO item: serviceItems){
			Integer key = item.getGroupServiceID(); 
			
			if(workItems.containsKey(key)){
				BigDecimal price = new BigDecimal(workItems.get(key).getPrice()); 
				ammount = ammount.add(price);
				item.setPrice(workItems.get(key).getPrice());
			}
		}
		
		carWashDTO.setAmmount(ammount);
		BigDecimal couponDecimal = new BigDecimal(0d);
		if(cashCouponDb != null){
			couponDecimal = cashCouponDb.getAmount();
		}
		ammount = ammount.subtract(couponDecimal);
		if(ammount.doubleValue()<0){ //订单金额不能为负数
			ammount = BigDecimal.ZERO;
		}
		carWashDTO.setPayment( ammount );
		carWashDTO.setStatus(Integer.parseInt(ORDER_STATUS.CREATEED.toString()));
		carWashDTO.setFlg(Integer.parseInt(WASH_FLG.SXXC.toString()));
		this.updateDAO.updateOne(CarWashDTO.INSERT, carWashDTO, M10190WS, SH_INFO);
		
		for(ServiceItemDTO item: serviceItems){
			WashItemDTO washItemDTO = new WashItemDTO();
			washItemDTO.setCarWashID(carWashDTO.getCarWashID());
			washItemDTO.setGroupServiceID(item.getGroupServiceID());
			washItemDTO.setPrice(new BigDecimal(item.getPrice()));
			washItemDTO.setTotal(new BigDecimal(item.getPrice()));
			this.updateDAO.updateOne(WashItemDTO.INSERT, washItemDTO, M10190WS, SH_INFO);
		}
		
		// 洗车订单追加
		WashOrderDTO washOrderDTO = new WashOrderDTO();
		//washOrderDTO.setOrderNO(UUID.randomUUID().toString().replace("-", ""));
		washOrderDTO.setCustomerID(customerID);
		washOrderDTO.setCarWashID(carWashDTO.getCarWashID());
		washOrderDTO.setCreateDate(this.getCurrentDate());
		washOrderDTO.setCreateTime(this.getCurrentTime());
		washOrderDTO.setRemarks(remark);
		washOrderDTO.setRequestDate(date);
		washOrderDTO.setRequestTime(time);
		washOrderDTO.setLatitude(latitude);
		washOrderDTO.setLongitude(longitude);
		washOrderDTO.setWorkerGroupID(orderResult.getOrderInfo().getWorkerID());
		washOrderDTO.setDelFlg(Integer.parseInt(DELETE_FLG.NO_DELETED.toString()));
		washOrderDTO.setLastDate(this.getCurrentDate());
		washOrderDTO.setLastTime(this.getDefaultTime());
		washOrderDTO.setWashAddress(address);
		this.updateDAO.updateOne(WashOrderDTO.INSERT, washOrderDTO, M10190WS, SH_INFO);
		
		String dateFormat = (new java.text.SimpleDateFormat("yyMM")).format(this.getCurrentDate());
		washOrderDTO.setOrderNO(ORDER_TYPE.SXXC_ORDER + dateFormat +  "1" + String.format("%06d", washOrderDTO.getWashOrderID()));
		this.updateDAO.updateOne(WashOrderDTO.UPDATE, washOrderDTO, M10190WS, SH_INFO);
		
		// 代金卷
		if(cashCouponDb!=null){
			hbCashCoupon.InsertCashCouponRecord(customerID, cashCouponDb.getCASHCOUPONID(),
					washOrderDTO.getWashOrderID(), Integer.parseInt(CASH_COUPON_RECORD_TYPE.IN_USE.toString()));
		}

		// 画面表示用
		VOrderInfoDTO vorderInfo = new VOrderInfoDTO();
		vorderInfo.setWashOrderID(washOrderDTO.getWashOrderID());
		VOrderInfoDTO orderInfo = this.queryDAO.queryForObject(VOrderInfoDTO.EQUAL_SEARCH, vorderInfo);

		if(orderInfo != null){
			OrderInfoDTO orderInfoDTO = new OrderInfoDTO();
			orderInfoDTO.setOrderID(orderInfo.getWashOrderID());
			orderInfoDTO.setOrderNO(orderInfo.getOrderNO());
			orderInfoDTO.setCreateDate(orderInfo.getCreateDate());
			orderInfoDTO.setCreateTime(orderInfo.getCreateTime());
			orderInfoDTO.setLicencePlate(orderInfo.getLicencePlate());
			orderInfoDTO.setRequestDate(orderInfo.getRequestDate());
			orderInfoDTO.setRequestTime(orderInfo.getRequestTime());
			orderInfoDTO.setWashDate(orderInfo.getWashDate());
			orderInfoDTO.setWashTime(orderInfo.getWashTime());
			orderInfoDTO.setWashAddress(orderInfo.getWashAddress());
			orderInfoDTO.setMobile(orderInfo.getMobileNo());
			orderInfoDTO.setEvaluation(orderInfo.getScore());
			orderInfoDTO.setPrice(orderInfo.getAmmount().doubleValue());
			orderInfoDTO.setWorker(orderInfo.getGroupName());
			orderInfoDTO.setStatus(orderInfo.getOrderStatus());
			orderInfoDTO.setLongitude(orderInfo.getLongitude());
			orderInfoDTO.setLatitude(orderInfo.getLatitude());
			orderInfoDTO.setPayment(orderInfo.getPayment().doubleValue());
			
			if(cashCouponDb!=null){
				CashCouponDTO coupon = new CashCouponDTO();
				coupon.setCashCouponID(orderInfo.getCASHCOUPONID());
				coupon.setName(orderInfo.getName());
				coupon.setCashdescription(orderInfo.getDescription());
				coupon.setAmount(orderInfo.getCouponAmmount().doubleValue());
				coupon.setStart(orderInfo.getStartDate());
				coupon.setEnd(orderInfo.getEndDate());
				coupon.setStatus(orderInfo.getCouponStatus());
				orderInfoDTO.setCashCoupon(coupon);
			}
			
			if(orderInfo.getGroupServiceID()!=null){
				String[] serviceIDs = orderInfo.getGroupServiceID().split(",");
				List<OrderItemDTO> orderItems = new ArrayList<OrderItemDTO>();
				for(String serviceID : serviceIDs){
					OrderItemDTO orderItemDTO = new OrderItemDTO();
					List<VWorkerServiceItemsDTO> lstServiceItem =
							hbMasterCache.getMasterData(MASTER_NAME.GROUP_SERVICE, 
									Integer.parseInt( (String)serviceID));
					if(lstServiceItem != null && lstServiceItem.size()>0){
						VWorkerServiceItemsDTO workerServiceItemsDTO = lstServiceItem.get(0);
						orderItemDTO.setName(workerServiceItemsDTO.getItemName());
						orderItemDTO.setGroupServiceID(workerServiceItemsDTO.getGroupServiceId());
						orderItemDTO.setPrice(workerServiceItemsDTO.getPrice().doubleValue());
						orderItemDTO.setExplain(workerServiceItemsDTO.getComment());
						orderItems.add(orderItemDTO);
					}
				}
				orderInfoDTO.setOrderItems(orderItems.toArray(new OrderItemDTO[orderItems.size()] ));				
			}

			
			if(orderInfo.getEvidencePathBefore()!=null){
				String[] evidencePaths = orderInfo.getEvidencePathBefore().split(",");
				List<String> paths = new ArrayList<String>();
				for(String path : evidencePaths){
					paths.add(path);
				}
				orderInfoDTO.setEvidence(paths.toArray(new String[paths.size()]));
			}
			if(orderInfo.getEvidencePathAfter()!=null){
				String[] evidencePaths = orderInfo.getEvidencePathAfter().split(",");
				List<String> paths = new ArrayList<String>();
				for(String path : evidencePaths){
					paths.add(path);
				}
				orderInfoDTO.setEvidenceafter(paths.toArray(new String[paths.size()]));
			}
			orderResult.setOrderInfo(orderInfoDTO);
		}
		
		return orderResult;
	}
	
	private Map<Integer, ServiceItemDTO> getWorkItems(String cityCode, Double longitude, Double latitude) {
		Map<Integer, ServiceItemDTO> serviceItemDTOs = new HashMap<Integer, ServiceItemDTO>();
		//检索城市划分区域信息
		CityInfoDTO cityInfo = hbMasterCache.getMasterData(MASTER_NAME.CITYAREA, cityCode);

		if (cityInfo == null) {
			//1件也不存在的场合、「ApplicationException」返回
			createApplicationException(M10440WS, "城市划分");
		}
		
		// 根据地理位置显示区域服务项目
		RegionalIntegerXY regionalXY = GISUtil.millerXY(longitude, latitude, cityInfo.getCenterLongitude(), cityInfo.getCenterLatitudue());
		for(CityAreaDTO cityArea:cityInfo.getCityAreaDTOArray()){
			if(cityArea.getGpsGon().contains(regionalXY.getX(), regionalXY.getY())){
				for(GroupServiceItemDTO item: cityArea.getServiceItems()){
					ServiceItemDTO serviceItem = new ServiceItemDTO();
					serviceItem.setServiceItemID(item.getServiceItemID());
					serviceItem.setGroupServiceID(item.getGroupServiceID());
					serviceItem.setName(item.getName());
					serviceItem.setPrice(item.getPrice().doubleValue());
					serviceItem.setExplain(item.getExplain());
					serviceItemDTOs.put(item.getGroupServiceID(), serviceItem);
				}
				break;
			}
		}

		return serviceItemDTOs;
	}

	private OrderResultDTO checkCreateOrder(Long customerID, String cityCode, Double longitude,
			Double latitude, Date date, Time time, ServiceItemDTO[] serviceItems) {
		OrderResultDTO result = new OrderResultDTO();
		OrderInfoDTO orderInfo = new OrderInfoDTO();
		result.setOrderInfo(orderInfo);
		result.setResult(false);
		//检索城市划分区域信息
		CityInfoDTO cityInfo = hbMasterCache.getMasterData(MASTER_NAME.CITYAREA, cityCode);

		if (cityInfo == null) {
			//1件也不存在的场合、「ApplicationException」返回
			createApplicationException(M10440WS, "城市划分");
		}
		
		RegionalIntegerXY regionalXY = GISUtil.millerXY(
				longitude, latitude, cityInfo.getCenterLongitude(), cityInfo.getCenterLatitudue());
		for(CityAreaDTO cityArea:cityInfo.getCityAreaDTOArray()){
			if(cityArea.getGpsGon().contains(regionalXY.getX(), regionalXY.getY())){
				
				if (cityArea.getOpenFlg().toString().equals(AREA_OPEN_TYPE.OPENING.toString())){
					orderInfo.setWorkerID(cityArea.getWorkerGroupID());
					result.setResult(true);
				}
				else if(cityArea.getNeed() == 0){
					com.beetlestech.nfe.main.db.tbl.CityAreaDTO cityAreaDTO = 
							new com.beetlestech.nfe.main.db.tbl.CityAreaDTO();
					cityAreaDTO.setCityAreaID(cityArea.getCityAreaID());
					cityAreaDTO.setOpenFlg(Integer.parseInt(AREA_OPEN_TYPE.OPENING.toString()));
					this.updateDAO.updateOne(
							com.beetlestech.nfe.main.db.tbl.CityAreaDTO.UPDATE, 
							cityAreaDTO, M10190WS, SH_INFO);
					orderInfo.setWorkerID(cityArea.getWorkerGroupID());
					result.setResult(true);
				}
				else{
					result.setOpenCap(cityArea.getCeiling());
					
					// 确认是否在此区域下过单
					WashOrderBeyondDTO washOrderBeyondDTO = new WashOrderBeyondDTO();
					washOrderBeyondDTO.setCustomerID(customerID);
					washOrderBeyondDTO.setCityAreaID(cityArea.getCityAreaID());
					
					com.beetlestech.nfe.main.db.tbl.CityAreaDTO cityAreaDTO = 
							new com.beetlestech.nfe.main.db.tbl.CityAreaDTO();
					cityAreaDTO.setCityAreaID(cityArea.getCityAreaID());
					if(this.queryDAO.count(WashOrderBeyondDTO.COUNT, washOrderBeyondDTO) == 0){
						// 如果未下过单增加一用户数
						cityAreaDTO.setNeed(cityArea.getNeed() - 1);
					}
					else{
						cityAreaDTO.setNeed(cityArea.getNeed());
					}
					cityAreaDTO.setOrderCount(cityArea.getOrderCount() + 1);
					this.updateDAO.updateOne(
							com.beetlestech.nfe.main.db.tbl.CityAreaDTO.UPDATE, 
							cityAreaDTO, M10190WS, SH_INFO);
					
					result.setLackCount(cityArea.getNeed());
					result.setOrderInfo(null);
					
					if(result.getOpenCap()!=null && result.getOpenCap()>0){
						// 增加履历订单记录
						washOrderBeyondDTO = new WashOrderBeyondDTO();
						washOrderBeyondDTO.setCityCode(cityCode);
						washOrderBeyondDTO.setCityAreaID(cityArea.getCityAreaID());
						washOrderBeyondDTO.setCustomerID(customerID);
						washOrderBeyondDTO.setCreateDate(this.getCurrentDate());
						washOrderBeyondDTO.setCreateTime(this.getCurrentTime());
						washOrderBeyondDTO.setRequestDate(date);
						washOrderBeyondDTO.setRequestTime(time);
						washOrderBeyondDTO.setLongitude(longitude);
						washOrderBeyondDTO.setLatitude(latitude);
						
						this.updateDAO.updateOne(WashOrderBeyondDTO.INSERT, washOrderBeyondDTO, M10190WS, SH_INFO);
						
						for(ServiceItemDTO item: serviceItems){
							WashItemBeyondDTO sashItemBeyondDTO = new WashItemBeyondDTO();
							sashItemBeyondDTO.setBeyondID(washOrderBeyondDTO.getBeyondID());
							sashItemBeyondDTO.setServiceItemsID(item.getServiceItemID());
							this.updateDAO.updateOne(WashItemBeyondDTO.INSERT, sashItemBeyondDTO, M10190WS, SH_INFO);
						}
					}
				}
				break;
			}
		}
		return result;
	}

	@Override
	public OrdersDTO getOrders(Long customerID, Integer page) {
		OrdersDTO ordersDTO = new OrdersDTO();
		Integer firstRow = ((page -1) * 40) ;
		Integer lastRow = (page * 40);
		
		StatementDTO statementDTO = new StatementDTO();
		StatementUtil.addOrderBy(statementDTO, VOrderInfoDTO.COLUMN_CREATE_DATE, StatementUtil.KEYWORD.DESC);
		StatementUtil.addOrderBy(statementDTO, VOrderInfoDTO.COLUMN_CREATE_TIME, StatementUtil.KEYWORD.DESC);
		
		List<VOrderInfoDTO> orderInfoArray = this.queryDAO.queryBySQL(
				VOrderInfoDTO.SQL_SEARCH,  
				VOrderInfoDTO.COLUMN_CUSTOMER_ID + " = " + customerID.toString(), 
				statementDTO.getSQLOrderByStatement(), null, 
				String.format("%d,%d", firstRow, lastRow), null);
		if(orderInfoArray.size()<40){
			ordersDTO.setIsEnd(true);
		}
		List<OrderInfoDTO> lst = new ArrayList<OrderInfoDTO>();
		for(VOrderInfoDTO item : orderInfoArray){
			OrderInfoDTO orderInfoDTO = new OrderInfoDTO();
			orderInfoDTO.setOrderID(item.getWashOrderID());
			orderInfoDTO.setOrderNO(item.getOrderNO());
			orderInfoDTO.setCreateDate(item.getCreateDate());
			orderInfoDTO.setCreateTime(item.getCreateTime());
			orderInfoDTO.setLicencePlate(item.getLicencePlate());
			orderInfoDTO.setRequestDate(item.getRequestDate());
			orderInfoDTO.setRequestTime(item.getRequestTime());
			orderInfoDTO.setWashDate(item.getWashDate());
			orderInfoDTO.setWashTime(item.getWashTime());
			orderInfoDTO.setWashAddress(item.getWashAddress());
			orderInfoDTO.setMobile(item.getMobileNo());
			orderInfoDTO.setEvaluation(item.getScore());
			orderInfoDTO.setPrice(item.getAmmount().doubleValue());
			orderInfoDTO.setWorker(item.getGroupName());
			orderInfoDTO.setStatus(item.getOrderStatus());
			orderInfoDTO.setLongitude(item.getLongitude());
			orderInfoDTO.setLatitude(item.getLatitude());
			orderInfoDTO.setPayment(item.getPayment().doubleValue());
			
			if(item.getCASHCOUPONID()!=null){
				CashCouponDTO coupon = new CashCouponDTO();
				coupon.setCashCouponID(item.getCASHCOUPONID());
				coupon.setName(item.getName());
				coupon.setCashdescription(item.getDescription());
				coupon.setAmount(item.getCouponAmmount().doubleValue());
				coupon.setStart(item.getStartDate());
				coupon.setEnd(item.getEndDate());
				coupon.setStatus(item.getCouponStatus());
				orderInfoDTO.setCashCoupon(coupon);
			}
			
			if(item.getGroupServiceID() != null){
				String[] serviceIDs = item.getGroupServiceID().split(",");
				List<OrderItemDTO> orderItems = new ArrayList<OrderItemDTO>();
				for(String serviceID : serviceIDs){
					OrderItemDTO orderItemDTO = new OrderItemDTO();
					
					List<VWorkerServiceItemsDTO> lstServiceItem =
							hbMasterCache.getMasterData(MASTER_NAME.GROUP_SERVICE, Integer.parseInt(serviceID));
					if(lstServiceItem != null && lstServiceItem.size()>0){
						VWorkerServiceItemsDTO workerServiceItemsDTO = lstServiceItem.get(0);
						orderItemDTO.setName(workerServiceItemsDTO.getItemName());
						orderItemDTO.setGroupServiceID(workerServiceItemsDTO.getGroupServiceId());
						orderItemDTO.setPrice(workerServiceItemsDTO.getPrice().doubleValue());
						orderItemDTO.setExplain(workerServiceItemsDTO.getComment());
						orderItems.add(orderItemDTO);
					}
				}
				orderInfoDTO.setOrderItems(orderItems.toArray(new OrderItemDTO[orderItems.size()] ));//fix by shaolizhi
			}

			if(item.getEvidencePathBefore()!=null){
				String[] evidencePaths = item.getEvidencePathBefore().split(",");
				List<String> paths = new ArrayList<String>();
				for(String path : evidencePaths){
					paths.add(path);
				}
				orderInfoDTO.setEvidence(paths.toArray(new String[paths.size()]));
			}

			if(item.getEvidencePathAfter()!=null){
				String[] evidencePaths = item.getEvidencePathAfter().split(",");
				List<String> paths = new ArrayList<String>();
				for(String path : evidencePaths){
					paths.add(path);
				}
				orderInfoDTO.setEvidenceafter(paths.toArray(new String[paths.size()]));
			}
			
			lst.add(orderInfoDTO);
		}
		
		ordersDTO.setOrderInfoArray(lst.toArray(new OrderInfoDTO[lst.size()]));
		return ordersDTO;
	}
	
	@Override
	public OrderInfoDTO getOrder(Long customerID, Long orderID){
		OrderInfoDTO orderInfo = new OrderInfoDTO();
		VOrderInfoDTO searchDTO = new VOrderInfoDTO();
		searchDTO.setCustomerID(customerID);
		searchDTO.setWashOrderID(orderID);

		VOrderInfoDTO vOrderInfo = 
				this.queryDAO.queryForObject(VOrderInfoDTO.EQUAL_SEARCH, searchDTO);
		if(vOrderInfo == null){
			createApplicationException(M10140CM);
		}
		else{
			orderInfo.setOrderID(vOrderInfo.getWashOrderID());
			orderInfo.setOrderNO(vOrderInfo.getOrderNO());
			orderInfo.setCreateDate(vOrderInfo.getCreateDate());
			orderInfo.setCreateTime(vOrderInfo.getCreateTime());
			orderInfo.setLicencePlate(vOrderInfo.getLicencePlate());
			orderInfo.setRequestDate(vOrderInfo.getRequestDate());
			orderInfo.setRequestTime(vOrderInfo.getRequestTime());
			orderInfo.setWashDate(vOrderInfo.getWashDate());
			orderInfo.setWashTime(vOrderInfo.getWashTime());
			orderInfo.setWashAddress(vOrderInfo.getWashAddress());
			orderInfo.setMobile(vOrderInfo.getMobileNo());
			orderInfo.setEvaluation(vOrderInfo.getScore());
			orderInfo.setPrice(vOrderInfo.getAmmount().doubleValue());
			orderInfo.setWorker(vOrderInfo.getGroupName());
			orderInfo.setStatus(vOrderInfo.getOrderStatus());
			orderInfo.setLongitude(vOrderInfo.getLongitude());
			orderInfo.setLatitude(vOrderInfo.getLatitude());
			orderInfo.setPayment(vOrderInfo.getPayment().doubleValue());
			
			if(vOrderInfo.getCASHCOUPONID()!=null){
				CashCouponDTO coupon = new CashCouponDTO();
				coupon.setCashCouponID(vOrderInfo.getCASHCOUPONID());
				coupon.setName(vOrderInfo.getName());
				coupon.setCashdescription(vOrderInfo.getDescription());
				coupon.setAmount(vOrderInfo.getCouponAmmount().doubleValue());
				coupon.setStart(vOrderInfo.getStartDate());
				coupon.setEnd(vOrderInfo.getEndDate());
				coupon.setStatus(vOrderInfo.getCouponStatus());
				orderInfo.setCashCoupon(coupon);
			}
			
			String[] serviceIDs = vOrderInfo.getGroupServiceID().split(",");
			List<OrderItemDTO> orderItems = new ArrayList<OrderItemDTO>();
			for(String serviceID : serviceIDs){
				OrderItemDTO orderItemDTO = new OrderItemDTO();
				
				List<VWorkerServiceItemsDTO> lstServiceItem =
						hbMasterCache.getMasterData(MASTER_NAME.GROUP_SERVICE, Integer.parseInt(serviceID));
				if(lstServiceItem != null && lstServiceItem.size()>0){
					VWorkerServiceItemsDTO workerServiceItemsDTO = lstServiceItem.get(0);
					orderItemDTO.setName(workerServiceItemsDTO.getItemName());
					orderItemDTO.setGroupServiceID(workerServiceItemsDTO.getGroupServiceId());
					orderItemDTO.setPrice(workerServiceItemsDTO.getPrice().doubleValue());
					orderItemDTO.setExplain(workerServiceItemsDTO.getComment());
					orderItems.add(orderItemDTO);
				}
			}
			orderInfo.setOrderItems(orderItems.toArray(new OrderItemDTO[orderItems.size()] ));//fix by shaolizhi
			
			if(vOrderInfo.getEvidencePathBefore()!=null){
				String[] evidencePaths = vOrderInfo.getEvidencePathBefore().split(",");
				List<String> paths = new ArrayList<String>();
				for(String path : evidencePaths){
					paths.add(path);
				}
				orderInfo.setEvidence(paths.toArray(new String[paths.size()]));
			}
			
			if(vOrderInfo.getEvidencePathAfter()!=null){
				String[] evidencePaths = vOrderInfo.getEvidencePathAfter().split(",");
				List<String> paths = new ArrayList<String>();
				for(String path : evidencePaths){
					paths.add(path);
				}
				orderInfo.setEvidenceafter(paths.toArray(new String[paths.size()]));
			}
		}
		
		return orderInfo;
	}
	
	@Override
	public void updateEvaluation(Long customerID, Long orderNO, Integer leve) {
		WashOrderDTO washOrderDTO = new WashOrderDTO();
		washOrderDTO.setCustomerID(customerID);
		washOrderDTO.setWashOrderID(orderNO);
		washOrderDTO = this.queryDAO.queryForObject(WashOrderDTO.EQUAL_SEARCH, washOrderDTO);
		if(washOrderDTO == null){
			createApplicationException(M10440WS, "订单");
		}
		
		washOrderDTO.setScore(leve);
		this.updateDAO.updateOne(WashOrderDTO.UPDATE, washOrderDTO, M10190WS, SH_INFO);
		
		CarWashDTO carWashDTO = new CarWashDTO();
		carWashDTO.setCarWashID(washOrderDTO.getCarWashID());
		carWashDTO.setStatus(Integer.parseInt(ORDER_STATUS.COMMENTED.toString()));
		this.updateDAO.updateOne(CarWashDTO.UPDATE, carWashDTO, M10190WS, SH_INFO);
	}

	/**
	 * 更新订单状态
	 * 
	 */
	@Override 
	public void updateOrderStatus(Integer workerID, Long orderNO, Integer status){
		WashOrderDTO washOrderDTO = new WashOrderDTO();
		//washOrderDTO.setCustomerID(customerID);
		washOrderDTO.setWorkerGroupID(workerID);
		washOrderDTO.setWashOrderID(orderNO);
		washOrderDTO = this.queryDAO.queryForObject(WashOrderDTO.EQUAL_SEARCH, washOrderDTO);
		if(washOrderDTO == null){
			createApplicationException(M10440WS, "订单");
		}
		
		CarWashDTO carWashDTO = new CarWashDTO();
		carWashDTO.setCarWashID(washOrderDTO.getCarWashID());
		Integer dbStatus = null;
		
		if(status == 1){
			dbStatus = Integer.parseInt( ORDER_STATUS.PROCESSING.toString());
		}
		else if(status == 2){
			dbStatus = Integer.parseInt( ORDER_STATUS.COMPLETED.toString());
		}
		else{
			createApplicationException(M10440WS, "订单");
		}
		carWashDTO.setStatus( dbStatus);
		int updateResult = this.updateDAO.updateOne(CarWashDTO.UPDATE, carWashDTO, M10901WC, SH_INFO);
		
		//推送
		if(updateResult == 1){	//更新订单状态成功，推送订单更改信息到用户
			long customerID = washOrderDTO.getCustomerID();
			
			JpushDTO jpushInfo = jpushUtils.getJpushInfoByCustomerID(customerID);
			
			MobileInfoDTO mobile = new MobileInfoDTO();
			mobile.setCustomerID(customerID);
			mobile = this.queryDAO.queryForObject(MobileInfoDTO.EQUAL_SEARCH, mobile);
			Integer imsi =1;//default iphone
			if(mobile!=null &&mobile.getIMSI()!=null){
				imsi = mobile.getIMSI();
			}
			if(jpushInfo != null){
				if(dbStatus == Integer.parseInt( ORDER_STATUS.PROCESSING.toString()) ){	//处理中
					Map<String,String> extra = new HashMap<String, String>();
					extra.put("orderID", String.valueOf(washOrderDTO.getWashOrderID() )  );
					extra.put("type", "0"  );
					jpushManager.sendByRegisitrationID("您的订单已在处理中",extra, imsi,jpushInfo.getRegisitrationID() ); 
				}
				else if(dbStatus == Integer.parseInt( ORDER_STATUS.COMPLETED.toString()) ){	//已完成
					Map<String,String> extra = new HashMap<String, String>();
					extra.put("orderID", String.valueOf(washOrderDTO.getWashOrderID()  )  );
					extra.put("type", "0"  );
					jpushManager.sendByRegisitrationID("您的订单已处理完成",extra,imsi,jpushInfo.getRegisitrationID() ); 
				}
			}
			

			
		}
		
	}
	
	@Override
	public void cancelOrder(Long customerID, Long orderID) {
		WashOrderDTO washOrderDTO = new WashOrderDTO();
		washOrderDTO.setCustomerID(customerID);
		washOrderDTO.setWashOrderID(orderID);
		washOrderDTO = this.queryDAO.queryForObject(WashOrderDTO.EQUAL_SEARCH, washOrderDTO);
		if(washOrderDTO == null){
			createApplicationException(M10440WS, "订单");
		}
		
		CarWashDTO carWashDTO = new CarWashDTO();
		carWashDTO.setCarWashID(washOrderDTO.getCarWashID());
		
		carWashDTO = this.queryDAO.queryForObject(CarWashDTO.EQUAL_SEARCH, carWashDTO);
		if(carWashDTO==null){
			createApplicationException(M10440WS, "订单");
		}
		if(carWashDTO!=null && carWashDTO.getStatus() == Integer.parseInt(ORDER_STATUS.PAID.toString()) ){
			createApplicationException(M11004WC, "订单");
		}
		
		carWashDTO.setStatus( Integer.parseInt(ORDER_STATUS.CANCEL.toString() ) );
		this.updateDAO.updateOne(CarWashDTO.UPDATE, carWashDTO, M10901WC, SH_INFO);
		
		//更改代金券状态
		hbCashCoupon.updateCashCouponRecord(customerID,  orderID, Integer.parseInt(CASH_COUPON_RECORD_TYPE.RETURNED.toString() ) );
		
		
	}
	
	@Override
	public void payFreeOrder(Long customerID, Long orderID) {
		WashOrderDTO washOrderDTO = new WashOrderDTO();
		washOrderDTO.setCustomerID(customerID);
		washOrderDTO.setWashOrderID(orderID);
		washOrderDTO = this.queryDAO.queryForObject(WashOrderDTO.EQUAL_SEARCH, washOrderDTO);
		if(washOrderDTO == null){
			createApplicationException(M10440WS, "订单");
		}
		
		CarWashDTO carWashDTO = new CarWashDTO();
		carWashDTO.setCarWashID(washOrderDTO.getCarWashID());
		
		carWashDTO = this.queryDAO.queryForObject(CarWashDTO.EQUAL_SEARCH, carWashDTO);
		if(carWashDTO==null){
			createApplicationException(M10440WS, "订单");
		}
		if(carWashDTO.getPayment()!=null && !(carWashDTO.getPayment().doubleValue()==0d) ){//不是0元订单 
			createApplicationException(M11106WC, "订单");
		}
		
		carWashDTO.setStatus( Integer.parseInt(ORDER_STATUS.PAID.toString() ) );
		int updateResult = this.updateDAO.updateOne(CarWashDTO.UPDATE, carWashDTO, M10901WC, SH_INFO);
		
		//更改代金券状态为已用
		hbCashCoupon.updateCashCouponRecord(customerID,  orderID, Integer.parseInt(CASH_COUPON_RECORD_TYPE.USED.toString() ) );
		
		if(updateResult==1){
			JpushDTO jpushInfo = jpushUtils.getJpushInfoByOrderID(orderID);
			if(jpushInfo != null){
				Map<String,String> extra = new HashMap<String, String>();
				extra.put("orderID", String.valueOf(orderID )  );
				extra.put("type", "0"  );
				jpushManager.sendByRegisitrationIDToWorker("有新付款订单",extra,jpushInfo.getRegisitrationID() );
			}
		}
		
	}
	
	@Override
	public WorkerAccountDTO getWorkerAccount(Integer workerGroupID) {
		VWorkerAccountDTO workerAccount = new VWorkerAccountDTO();
		WorkerAccountDTO resultDTO = new WorkerAccountDTO();
		workerAccount.setWorkerGroupID(workerGroupID);
		workerAccount = this.queryDAO.queryForObject(VWorkerAccountDTO.EQUAL_SEARCH, workerAccount);
		if(workerAccount == null)
		{
			resultDTO.setTodayAccount(0d);
			resultDTO.setTotelAccount(0d);
		}
		else{
			resultDTO.setTodayAccount(workerAccount.getTODAYAccount().doubleValue());
			resultDTO.setTotelAccount(workerAccount.getTotelAccount().doubleValue());
		}
		return resultDTO;
	}

	@Override
	public Boolean getQueryOrderPayResult(Long customerID, Long orderID, String orderType) {
		Boolean ret = false;
		if(orderType.equals(ORDER_TYPE.SXXC_ORDER.toString())){
			VOrderInfoDTO orderInfoDTO = new VOrderInfoDTO();
			if(customerID != null){
				orderInfoDTO.setCustomerID(customerID);
			}
			
			orderInfoDTO.setWashOrderID(orderID);
			orderInfoDTO = this.queryDAO.queryForObject(VOrderInfoDTO.EQUAL_SEARCH, orderInfoDTO);
			if(orderInfoDTO == null){
				createApplicationException(M10440WS, SH_INFO);
			}
			
			if(orderInfoDTO.getStatus() >= Integer.parseInt(ORDER_STATUS.PAID.toString())){
				ret = true;
			}
			else{
				ret = getOrderWeiPay(orderInfoDTO.getOrderNO(), orderInfoDTO.getCarWashID(), orderType);
				
				if(ret == true){
					// 运营推广 新用户 买一送一
					StatementDTO statementDTO = new StatementDTO();
					StatementUtil.andWhere(statementDTO, VOrderInfoDTO.COLUMN_STATUS, 
							StatementUtil.KEYWORD.GREATER_EQUAL_THAN, ORDER_STATUS.PAID);		
					StatementUtil.andWhere(statementDTO, VOrderInfoDTO.COLUMN_CUSTOMER_ID, 
							StatementUtil.KEYWORD.EQUAL, customerID);
					
					if(this.queryDAO.countBySQL(VOrderInfoDTO.COUNT, statementDTO.getSQLStatement()) == 1){
						// 初次使用赠送代金卷
						hbCashCoupon.InsertCashCouponRecord(customerID, 13,
								orderID, Integer.parseInt(CASH_COUPON_RECORD_TYPE.CAN_USE.toString()));
					}
					
					// 记录消费履历
					hbCustomerAccount.insetCustomerAccountDetail(
							customerID, 
							orderInfoDTO.getPayment(), 
							orderID, 
							ORDER_TYPE.SXXC_ORDER.toString(), 
							Integer.parseInt(PAYMENT_TYPE.ALIPAY.toString()));
				}
			}
		}
		else if(orderType.equals(ORDER_TYPE.SXXC_CASH_COUPON.toString())){
			CashCouponOrderDTO cashCouponOrderDTO = new CashCouponOrderDTO();
			cashCouponOrderDTO.setCashCouponOrderID(orderID);
			if(customerID != null){
				cashCouponOrderDTO.setCustomerID(customerID);
			}
			cashCouponOrderDTO = 
					this.queryDAO.queryForObject(CashCouponOrderDTO.EQUAL_SEARCH, cashCouponOrderDTO);
			
			if(cashCouponOrderDTO == null){
				//1件也不存在的场合、「ApplicationException」返回
				createApplicationException(M10440WS, SH_INFO);
			}

			if(cashCouponOrderDTO.getStatus() >= Integer.parseInt(ORDER_STATUS.PAID.toString())){
				ret = true;
			}
			else{
				ret = getOrderWeiPay(
						cashCouponOrderDTO.getOrderNO(), 
						cashCouponOrderDTO.getCashCouponOrderID(),
						orderType);
				
				if(ret == true){
					for(int i = 0;i< cashCouponOrderDTO.getCnt();i++){
						// 生成用户代金卷
						hbCashCoupon.InsertCashCouponRecord(
								customerID, 
								cashCouponOrderDTO.getCashCouponID(), 
								orderID, 
								Integer.parseInt(CASH_COUPON_RECORD_TYPE.CAN_USE.toString()));
					}
					
					// 更改订单状态
					cashCouponOrderDTO.setStatus(Integer.parseInt(ORDER_STATUS.PAID.toString()));
					this.updateDAO.updateOne(CashCouponOrderDTO.UPDATE, cashCouponOrderDTO, M10190WS, SH_INFO);
					
					// 记录消费履历
					hbCustomerAccount.insetCustomerAccountDetail(
							customerID, 
							cashCouponOrderDTO.getAmount(), 
							orderID, 
							ORDER_TYPE.SXXC_ORDER.toString(), 
							Integer.parseInt(PAYMENT_TYPE.ALIPAY.toString()));
				}

			}
		}

		return ret;
	}
	
	public Boolean getOrderWeiPay(String orderNO, Long orderID, String orderType){
		WechetQuery wechetQuery = wechetPay.getOrderPaied(orderNO);
		Boolean ret = false;
		if(wechetQuery != null){
			WeixinPayDTO weixinPay = new WeixinPayDTO();
//	        "bank_billno": "",
			weixinPay.setBankBillno(wechetQuery.getBank_billno());
//	        "transaction_id": "1229213601201504296165669674",
			weixinPay.setTransactionId(wechetQuery.getTransaction_id());
//	        "trade_state": "0",
			weixinPay.setTradestate(Integer.parseInt(wechetQuery.getTrade_state()));
//	        "bank_type": "",
			weixinPay.setBankType(wechetQuery.getBank_type());
//	        "input_charset": "GBK",
			weixinPay.setInputCharset(wechetQuery.getInput_charset());
//	        "is_split": "false",
			weixinPay.setIsSplit(wechetQuery.getIs_split());
//	        "discount": "0",
			weixinPay.setDiscount(Integer.parseInt(wechetQuery.getDiscount()));
//	        "product_fee": "1",
			weixinPay.setProductFee(Integer.parseInt(wechetQuery.getProduct_fee()));
//	        "fee_type": "1",
			weixinPay.setFeeType(Integer.parseInt(wechetQuery.getFee_type()));
//	        "ret_msg": "",
			weixinPay.setRetMsg(wechetQuery.getRet_msg());
//	        "transport_fee": "0",
			weixinPay.setTransportFee(Integer.parseInt(wechetQuery.getTransport_fee()));
//	        "out_trade_no": "8",
			weixinPay.setOutTradeNo(wechetQuery.getOut_trade_no());
//	        "partner": "1229213601",
			weixinPay.setPartner(wechetQuery.getPartner());
//	        "rmb_total_fee": "",
			weixinPay.setRmbTotalFee(wechetQuery.getRmb_total_fee());
//	        "trade_mode": "1",
			weixinPay.setTrademode(Integer.parseInt(wechetQuery.getTrade_mode()));
//	        "total_fee": "1",
			weixinPay.setTotalFee(Integer.parseInt(wechetQuery.getTotal_fee()));
//	        "attach": "",
			weixinPay.setAttach(wechetQuery.getAttach());
//	        "time_end": "20150429201246",
			weixinPay.setTimeEnd(wechetQuery.getTime_end());
//	        "ret_code": 0,
			weixinPay.setRetCode(Integer.parseInt(wechetQuery.getRet_code()));
//	        "is_refund": "false"
			weixinPay.setIsRefund(wechetQuery.getIs_refund());
			
			this.updateDAO.updateOne(WeixinPayDTO.INSERT, weixinPay, M10190WS);
			
			if(orderType.equals(ORDER_TYPE.SXXC_ORDER.toString())){
				CarWashDTO carWashDTO = new CarWashDTO();
				carWashDTO.setCarWashID(orderID);
				carWashDTO.setStatus(Integer.parseInt(ORDER_STATUS.PAID.toString()));
				this.updateDAO.updateOne(CarWashDTO.UPDATE, carWashDTO, M10901WC, SH_INFO);
				ret = true;
			}
			else if(orderType.equals(ORDER_TYPE.SXXC_CASH_COUPON.toString())){
				CashCouponOrderDTO cashCouponOrderDTO = new CashCouponOrderDTO();
				cashCouponOrderDTO.setCashCouponOrderID(orderID);
				cashCouponOrderDTO.setStatus(Integer.parseInt(ORDER_STATUS.PAID.toString()));
				this.updateDAO.updateOne(CashCouponOrderDTO.UPDATE, cashCouponOrderDTO, M10901WC, SH_INFO);
				ret = true;
			}
			else{
				ret = false;
			}
		}
		else{
			ret = false;
		}
		
		return ret;
	}

	@Override
	public void updateOrderEvidence(Integer workerID, Long orderNO,
			String[] beforePics, String[] afterPics) {
		
		WashOrderDTO washOrderDTO = new WashOrderDTO();
		washOrderDTO.setWorkerGroupID(workerID);
		washOrderDTO.setWashOrderID(orderNO);
		washOrderDTO = this.queryDAO.queryForObject(WashOrderDTO.EQUAL_SEARCH, washOrderDTO);
		if(washOrderDTO == null){
			createApplicationException(M10440WS, "订单");
		}
		
		//删除原有evidence
		OrderEvidenceDTO deleteEvidenceDto = new OrderEvidenceDTO();
		Long orderID = washOrderDTO.getWashOrderID();
		deleteEvidenceDto.setWashOrderID(orderID);
		
		if(beforePics!=null){
			deleteEvidenceDto.setEvidenceFlg( Integer.parseInt(ORDER_EVIDENCE_STATUS.BEFORE.toString() ) );
			List<OrderEvidenceDTO> evidenceList = this.queryDAO.queryForObjectList(OrderEvidenceDTO.EQUAL_SEARCH, deleteEvidenceDto);
			for(OrderEvidenceDTO element:evidenceList){
				this.updateDAO.update(OrderEvidenceDTO.DELETE, element);
			}
		}
		if(afterPics!=null){
			deleteEvidenceDto.setEvidenceFlg( Integer.parseInt(ORDER_EVIDENCE_STATUS.AFTER.toString() ) );
			List<OrderEvidenceDTO> evidenceList = this.queryDAO.queryForObjectList(OrderEvidenceDTO.EQUAL_SEARCH, deleteEvidenceDto);
			for(OrderEvidenceDTO element:evidenceList){
				this.updateDAO.update(OrderEvidenceDTO.DELETE, element);
			}
		}

		
		
		
		if(beforePics!=null){
			for(String beforePic: beforePics){	//M10902WC
				OrderEvidenceDTO orderEvidenceDTO = new OrderEvidenceDTO();
				orderEvidenceDTO.setUpdateDate(new SystemHandlerImpl().getCurrentDate());
				orderEvidenceDTO.setUpdateTime(new SystemHandlerImpl().getCurrentTime()); 
				orderEvidenceDTO.setWashOrderID(orderNO);
				orderEvidenceDTO.setEvidencePath(beforePic);
				orderEvidenceDTO.setEvidenceFlg(Integer.parseInt( ORDER_EVIDENCE_STATUS.BEFORE.toString()));
				this.updateDAO.updateOne(OrderEvidenceDTO .INSERT, orderEvidenceDTO, M10902WC, SH_INFO);
			}
		}

		if(afterPics!=null){
			for(String afterPic: afterPics){
				OrderEvidenceDTO orderEvidenceDTO = new OrderEvidenceDTO();
				orderEvidenceDTO.setUpdateDate(new SystemHandlerImpl().getCurrentDate());
				orderEvidenceDTO.setUpdateTime(new SystemHandlerImpl().getCurrentTime()); 
				orderEvidenceDTO.setWashOrderID(orderNO);
				orderEvidenceDTO.setEvidencePath(afterPic);
				orderEvidenceDTO.setEvidenceFlg(Integer.parseInt( ORDER_EVIDENCE_STATUS.AFTER.toString()));
				this.updateDAO.updateOne(OrderEvidenceDTO.INSERT, orderEvidenceDTO, M10902WC, SH_INFO);
			}
		}
	}

	@Override
	public Boolean getQueryOrderPayResult2(String orderNo) {
		
		Boolean ret = false;
		String orderType = orderNo.substring(0, 3);
		if(orderType.equals(ORDER_TYPE.SXXC_ORDER.toString())){
			VOrderInfoDTO orderInfoDTO = new VOrderInfoDTO();
			
			orderInfoDTO.setOrderNO(orderNo);
			orderInfoDTO = this.queryDAO.queryForObject(VOrderInfoDTO.EQUAL_SEARCH, orderInfoDTO);
			if(orderInfoDTO == null){
				createApplicationException(M10440WS, SH_INFO);
			}
			
			if(orderInfoDTO.getStatus() >= Integer.parseInt(ORDER_STATUS.PAID.toString())){
				ret = true;
			}
			else{
				ret = getOrderWeiPay(orderInfoDTO.getOrderNO(), orderInfoDTO.getCarWashID(), orderType);
				
				if(ret == true){
					// 运营推广 新用户 买一送一
					StatementDTO statementDTO = new StatementDTO();
					StatementUtil.andWhere(statementDTO, VOrderInfoDTO.COLUMN_STATUS, 
							StatementUtil.KEYWORD.GREATER_EQUAL_THAN, ORDER_STATUS.PAID);		
					StatementUtil.andWhere(statementDTO, VOrderInfoDTO.COLUMN_CUSTOMER_ID, 
							StatementUtil.KEYWORD.EQUAL, orderInfoDTO.getCustomerID());
					
					if(this.queryDAO.countBySQL(VOrderInfoDTO.COUNT, statementDTO.getSQLStatement()) == 1){
						// 初次使用赠送代金卷
						hbCashCoupon.InsertCashCouponRecord(orderInfoDTO.getCustomerID(), 13,
								orderInfoDTO.getWashOrderID(), Integer.parseInt(CASH_COUPON_RECORD_TYPE.CAN_USE.toString()));
					}
					
					// 记录消费履历
					hbCustomerAccount.insetCustomerAccountDetail(
							orderInfoDTO.getCustomerID(), 
							orderInfoDTO.getPayment(), 
							orderInfoDTO.getWashOrderID(), 
							ORDER_TYPE.SXXC_ORDER.toString(), 
							Integer.parseInt(PAYMENT_TYPE.ALIPAY.toString()));
				}
			}
		}
		else if(orderType.equals(ORDER_TYPE.SXXC_CASH_COUPON.toString())){
			CashCouponOrderDTO cashCouponOrderDTO = new CashCouponOrderDTO();
			cashCouponOrderDTO.setOrderNO(orderNo);
			cashCouponOrderDTO = 
					this.queryDAO.queryForObject(CashCouponOrderDTO.EQUAL_SEARCH, cashCouponOrderDTO);
			
			if(cashCouponOrderDTO == null){
				//1件也不存在的场合、「ApplicationException」返回
				createApplicationException(M10440WS, SH_INFO);
			}

			if(cashCouponOrderDTO.getStatus() >= Integer.parseInt(ORDER_STATUS.PAID.toString())){
				ret = true;
			}
			else{
				ret = getOrderWeiPay(
						cashCouponOrderDTO.getOrderNO(), 
						cashCouponOrderDTO.getCashCouponOrderID(),
						orderType);
				
				if(ret == true){
					for(int i = 0;i< cashCouponOrderDTO.getCnt();i++){
						// 生成用户代金卷
						hbCashCoupon.InsertCashCouponRecord(
								cashCouponOrderDTO.getCustomerID(), 
								cashCouponOrderDTO.getCashCouponID(), 
								cashCouponOrderDTO.getCashCouponOrderID(), 
								Integer.parseInt(CASH_COUPON_RECORD_TYPE.CAN_USE.toString()));
					}
					
					// 更改订单状态
					cashCouponOrderDTO.setStatus(Integer.parseInt(ORDER_STATUS.PAID.toString()));
					this.updateDAO.updateOne(CashCouponOrderDTO.UPDATE, cashCouponOrderDTO, M10190WS, SH_INFO);
					
					// 记录消费履历
					hbCustomerAccount.insetCustomerAccountDetail(
							cashCouponOrderDTO.getCustomerID(), 
							cashCouponOrderDTO.getAmount(), 
							cashCouponOrderDTO.getCashCouponOrderID(), 
							ORDER_TYPE.SXXC_ORDER.toString(), 
							Integer.parseInt(PAYMENT_TYPE.ALIPAY.toString()));
				}

			}
		}

		return ret;
	}

	@Override
	public void payOrder(String orderNO, Integer payType) {
		switch(payType){
		case 2:
			hbAliPay.payOrder(orderNO);
			break;
		case 3:
			getQueryOrderPayResult2(orderNO);
			break;
		}
	}
}
