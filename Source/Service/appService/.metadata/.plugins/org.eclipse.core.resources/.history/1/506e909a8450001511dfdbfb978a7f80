package com.beetlestech.nfe.main.biz.com.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.maxiaohua.genealogy.fw.core.biz.AbstractDBLogic;
import com.maxiaohua.genealogy.fw.core.push.JPushManager;
import com.maxiaohua.genealogy.fw.core.type.AutoInject;
import com.beetlestech.nfe.main.biz.a01.HBJPushUtils;
import com.beetlestech.nfe.main.biz.a01.HbCashCoupon;
import com.beetlestech.nfe.main.biz.a01.dto.AliPayInfoDTO;
import com.beetlestech.nfe.main.biz.com.HbAliPay;
import com.beetlestech.nfe.main.biz.com.HbCustomerAccount;
import com.beetlestech.nfe.main.biz.com.HbMasterCache;
import com.beetlestech.nfe.main.biz.constant.AlipayConfigConstant;
import com.beetlestech.nfe.main.biz.constant.CommonConstant;
import com.beetlestech.nfe.main.biz.constant.CtgCodeConstant;
import com.beetlestech.nfe.main.biz.constant.HbMessageCode;
import com.beetlestech.nfe.main.biz.constant.MasterCacheConstant.MASTER_NAME;
import com.beetlestech.nfe.main.db.base.StatementDTO;
import com.beetlestech.nfe.main.db.base.StatementUtil;
import com.beetlestech.nfe.main.db.tbl.CarWashDTO;
import com.beetlestech.nfe.main.db.tbl.CashCouponOrderDTO;
import com.beetlestech.nfe.main.db.tbl.JpushDTO;
import com.beetlestech.nfe.main.db.view.VCashCouponOrderDTO;
import com.beetlestech.nfe.main.db.view.VOrderInfoDTO;
import com.beetlestech.nfe.main.db.view.VWorkerServiceItemsDTO;

public class HbAliPayImpl extends AbstractDBLogic implements HbAliPay, HbMessageCode, CommonConstant, CtgCodeConstant {
	/**
	 * Mast数据缓存Biz类
	 */
	@AutoInject
	protected HbMasterCache hbMasterCache;
	
	@AutoInject
	protected HBJPushUtils jpushUtils;
	
    @AutoInject(name = "jpushManager")
    protected JPushManager jpushManager;
    
    @AutoInject
	protected HbCashCoupon hbCashCoupon;
    
    @AutoInject
	protected HbCustomerAccount hbCustomerAccount;
	
	@Override
	public AliPayInfoDTO getAliPayInfo(Long customerID, String orderNO) {
		String orderprice = "";
		String description = "";
		String productName = "";
		
		if(orderNO.substring(0, 3).equals(ORDER_TYPE.SXXC_ORDER.toString())){
			VOrderInfoDTO washOrderDTO = new VOrderInfoDTO();
			washOrderDTO.setOrderNO(orderNO);
			washOrderDTO = this.queryDAO.queryForObject(VOrderInfoDTO.EQUAL_SEARCH, washOrderDTO);
			
			if(washOrderDTO == null){
				//1件也不存在的场合、「ApplicationException」返回
				createApplicationException(M10440WS, "订单");
			}
			
			// 获得商品信息
			String[] serviceIDs = washOrderDTO.getGroupServiceID().split(",");
			StringBuffer content = new StringBuffer();
			for(String serviceID : serviceIDs){
				List<VWorkerServiceItemsDTO> lstServiceItem =
						hbMasterCache.getMasterData(MASTER_NAME.GROUP_SERVICE, Integer.parseInt(serviceID));
				if(lstServiceItem != null && lstServiceItem.size()>0){
					if(content.length()>0){
						content.append(",");
					}
					content.append(lstServiceItem.get(0).getItemName());
				}
			}
			
			orderprice = washOrderDTO.getPayment().toString();
			description = content.toString();
			productName = "随行洗车";
		}
		else if(orderNO.substring(0, 3).equals(ORDER_TYPE.SXXC_CASH_COUPON.toString())){
			VCashCouponOrderDTO cashCouponOrderDTO = new VCashCouponOrderDTO();
			cashCouponOrderDTO.setOrderNO(orderNO);
			cashCouponOrderDTO = 
					this.queryDAO.queryForObject(VCashCouponOrderDTO.EQUAL_SEARCH, cashCouponOrderDTO);
			
			if(cashCouponOrderDTO == null){
				//1件也不存在的场合、「ApplicationException」返回
				createApplicationException(M10440WS, "订单");
			}
			
			orderprice = cashCouponOrderDTO.getPrice().toString();
			description = cashCouponOrderDTO.getName();
			productName = "代金卷";
		}
		else{
			//1件也不存在的场合、「ApplicationException」返回
			createApplicationException(M10440WS, "订单");
		}

		AliPayInfoDTO aliPayInfo = new AliPayInfoDTO();
		aliPayInfo.setNotifyURL(AlipayConfigConstant.notify_url);
		aliPayInfo.setOrderprice(orderprice);
		aliPayInfo.setPartner(AlipayConfigConstant.partner);
		aliPayInfo.setPrivateKey(AlipayConfigConstant.private_key);
		aliPayInfo.setProductDescription(description);
		aliPayInfo.setProductName(productName);
		aliPayInfo.setPublicKey(AlipayConfigConstant.ali_public_key);
		aliPayInfo.setSeller(AlipayConfigConstant.default_seller);
		return aliPayInfo;
	}

	@Override
	public void payA01Order(Long customerID, Long orderID) {
		VOrderInfoDTO orderInfoDTO = new VOrderInfoDTO();
		orderInfoDTO.setWashOrderID(orderID);
		orderInfoDTO = this.queryDAO.queryForObject(VOrderInfoDTO.EQUAL_SEARCH, orderInfoDTO);
		
		if(orderInfoDTO == null){
			//1件也不存在的场合、「ApplicationException」返回
			createApplicationException(M10440WS, "订单");
		}
		
		// 订单是否已支付
		if(orderInfoDTO.getStatus() >= Integer.parseInt(ORDER_STATUS.PAID.toString())){
			return;
		}
		
		// 更改订单状态
		CarWashDTO carWash = new CarWashDTO();
		carWash.setCarWashID(orderID);
		carWash.setPayType(Integer.parseInt(PAYMENT_TYPE.ALIPAY.toString()));
		carWash.setStatus(Integer.parseInt(ORDER_STATUS.PAID.toString()));
		int updateResult = this.updateDAO.updateOne(CarWashDTO.UPDATE, carWash, M10190WS, "订单");
		
		// 记录消费履历
		hbCustomerAccount.insetCustomerAccountDetail(
				customerID, 
				orderInfoDTO.getPayment(), 
				orderID, 
				ORDER_TYPE.SXXC_ORDER.toString(), 
				Integer.parseInt(PAYMENT_TYPE.ALIPAY.toString()));

		if(updateResult==1){
			// 运营推广 新用户 买一送一
			StatementDTO statementDTO = new StatementDTO();
			StatementUtil.andWhere(statementDTO, VOrderInfoDTO.COLUMN_STATUS, 
					StatementUtil.KEYWORD.GREATER_EQUAL_THAN, ORDER_STATUS.PAID);		
			StatementUtil.andWhere(statementDTO, VOrderInfoDTO.COLUMN_CUSTOMER_ID, 
					StatementUtil.KEYWORD.EQUAL, customerID);
			
			if(this.queryDAO.countBySQL(VOrderInfoDTO.COUNT, statementDTO.getSQLStatement()) == 1){
				// 初次使用赠送代金卷
				hbCashCoupon.InsertCashCouponRecord(customerID, 13,
						orderID, Integer.parseInt(CASH_COUPON_RECORD_TYPE.CAN_USE.toString()));

			}
			
			//更改代金券状态为已用
			hbCashCoupon.updateCashCouponRecord(customerID,  orderID, Integer.parseInt(CASH_COUPON_RECORD_TYPE.USED.toString() ) );
			
			JpushDTO jpushInfo = jpushUtils.getJpushInfoByOrderID(orderID);
			if(jpushInfo != null){
				Map<String,String> extra = new HashMap<String, String>();
				extra.put("orderID", String.valueOf(orderID )  );
				jpushManager.sendByRegisitrationIDToWorker("有新付款订单",extra,jpushInfo.getRegisitrationID() );
			}
		}
	}

	@Override
	public void payCashCoupon(Long customerID, Long orderID) {
		CashCouponOrderDTO cashCouponOrderDTO = new CashCouponOrderDTO();
		cashCouponOrderDTO.setCashCouponOrderID(orderID);
		cashCouponOrderDTO = this.queryDAO.queryForObject(CashCouponOrderDTO.EQUAL_SEARCH, cashCouponOrderDTO);
		
		if(cashCouponOrderDTO == null){
			//1件也不存在的场合、「ApplicationException」返回
			createApplicationException(M10440WS, "订单");
		}
		
		// 订单是否已支付
		if(cashCouponOrderDTO.getStatus() >= Integer.parseInt(ORDER_STATUS.PAID.toString())){
			return;
		}
		
		for(int i = 0;i< cashCouponOrderDTO.getCnt();i++){
			// 生成用户代金卷
			hbCashCoupon.InsertCashCouponRecord(
					customerID, 
					cashCouponOrderDTO.getCashCouponID(), 
					orderID, 
					Integer.parseInt(CASH_COUPON_RECORD_TYPE.CAN_USE.toString()));
		}

		// 更改订单状态
		cashCouponOrderDTO.setStatus(Integer.parseInt(ORDER_STATUS.PAID.toString()));
		this.updateDAO.updateOne(CashCouponOrderDTO.UPDATE, cashCouponOrderDTO, M10190WS, "订单");
		
		// 记录消费履历
		hbCustomerAccount.insetCustomerAccountDetail(
				customerID, 
				cashCouponOrderDTO.getAmount(), 
				orderID, 
				ORDER_TYPE.SXXC_CASH_COUPON.toString(), 
				Integer.parseInt(PAYMENT_TYPE.ALIPAY.toString()));
	}

	@Override
	public void payOrder(String orderNo) {
		String orderType = orderNo.substring(0, 3);
		
		if(orderType.equals(ORDER_TYPE.SXXC_ORDER.toString())){
			VOrderInfoDTO orderInfoDTO = new VOrderInfoDTO();
			orderInfoDTO.setOrderNO(orderNo);
			orderInfoDTO = this.queryDAO.queryForObject(VOrderInfoDTO.EQUAL_SEARCH, orderInfoDTO);
			
			if(orderInfoDTO == null){
				//1件也不存在的场合、「ApplicationException」返回
				createApplicationException(M10440WS, "订单");
			}

			// 订单是否已支付
			if(orderInfoDTO.getStatus() >= Integer.parseInt(ORDER_STATUS.PAID.toString())){
				return;
			}
			
			// 更改订单状态
			CarWashDTO carWash = new CarWashDTO();
			carWash.setCarWashID(orderInfoDTO.getWashOrderID());
			carWash.setPayType(Integer.parseInt(PAYMENT_TYPE.ALIPAY.toString()));
			carWash.setStatus(Integer.parseInt(ORDER_STATUS.PAID.toString()));
			int updateResult = this.updateDAO.updateOne(CarWashDTO.UPDATE, carWash, M10190WS, "订单");
			
			// 记录消费履历
			hbCustomerAccount.insetCustomerAccountDetail(
					orderInfoDTO.getCustomerID(), 
					orderInfoDTO.getPayment(), 
					orderInfoDTO.getWashOrderID(), 
					ORDER_TYPE.SXXC_ORDER.toString(), 
					Integer.parseInt(PAYMENT_TYPE.ALIPAY.toString()));

			if(updateResult==1){
				// 运营推广 新用户 买一送一
				StatementDTO statementDTO = new StatementDTO();
				StatementUtil.andWhere(statementDTO, VOrderInfoDTO.COLUMN_STATUS, 
						StatementUtil.KEYWORD.GREATER_EQUAL_THAN, ORDER_STATUS.PAID);		
				StatementUtil.andWhere(statementDTO, VOrderInfoDTO.COLUMN_CUSTOMER_ID, 
						StatementUtil.KEYWORD.EQUAL, orderInfoDTO.getCustomerID());
				
				if(this.queryDAO.countBySQL(VOrderInfoDTO.COUNT, statementDTO.getSQLStatement()) == 1){
					// 初次使用赠送代金卷
					hbCashCoupon.InsertCashCouponRecord(orderInfoDTO.getCustomerID(), 13,
							orderInfoDTO.getWashOrderID(), Integer.parseInt(CASH_COUPON_RECORD_TYPE.CAN_USE.toString()));

				}
				
				//更改代金券状态为已用
				hbCashCoupon.updateCashCouponRecord(orderInfoDTO.getCustomerID(),  orderInfoDTO.getWashOrderID(), Integer.parseInt(CASH_COUPON_RECORD_TYPE.USED.toString() ) );
				
				JpushDTO jpushInfo = jpushUtils.getJpushInfoByOrderID(orderInfoDTO.getWashOrderID());
				if(jpushInfo != null){
					Map<String,String> extra = new HashMap<String, String>();
					extra.put("orderID", String.valueOf(orderInfoDTO.getWashOrderID() )  );
					jpushManager.sendByRegisitrationIDToWorker("有新付款订单",extra,jpushInfo.getRegisitrationID() );
				}
			}
		}
		else if(orderType.equals(ORDER_TYPE.SXXC_CASH_COUPON.toString())){
			CashCouponOrderDTO cashCouponOrderDTO = new CashCouponOrderDTO();
			cashCouponOrderDTO.setOrderNO(orderNo);
			cashCouponOrderDTO = this.queryDAO.queryForObject(CashCouponOrderDTO.EQUAL_SEARCH, cashCouponOrderDTO);
			
			if(cashCouponOrderDTO == null){
				//1件也不存在的场合、「ApplicationException」返回
				createApplicationException(M10440WS, "订单");
			}
			
			// 订单是否已支付
			if(cashCouponOrderDTO.getStatus() >= Integer.parseInt(ORDER_STATUS.PAID.toString())){
				return;
			}
			
			for(int i = 0;i< cashCouponOrderDTO.getCnt();i++){
				// 生成用户代金卷
				hbCashCoupon.InsertCashCouponRecord(
						cashCouponOrderDTO.getCustomerID(),
						cashCouponOrderDTO.getCashCouponID(), 
						cashCouponOrderDTO.getCashCouponOrderID(), 
						Integer.parseInt(CASH_COUPON_RECORD_TYPE.CAN_USE.toString()));
			}

			// 更改订单状态
			cashCouponOrderDTO.setStatus(Integer.parseInt(ORDER_STATUS.PAID.toString()));
			this.updateDAO.updateOne(CashCouponOrderDTO.UPDATE, cashCouponOrderDTO, M10190WS, "订单");
			
			// 记录消费履历
			hbCustomerAccount.insetCustomerAccountDetail(
					cashCouponOrderDTO.getCustomerID(), 
					cashCouponOrderDTO.getAmount(), 
					cashCouponOrderDTO.getCashCouponOrderID(), 
					ORDER_TYPE.SXXC_CASH_COUPON.toString(), 
					Integer.parseInt(PAYMENT_TYPE.ALIPAY.toString()));
		}
		
	}
}
